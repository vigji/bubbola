name: Release

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: false
        default: ''

jobs:
  debug:
    runs-on: ubuntu-22.04
    steps:
    - name: Debug information
      run: |
        echo "GitHub ref: ${{ github.ref }}"
        echo "GitHub event name: ${{ github.event_name }}"
        echo "GitHub ref type: ${{ github.ref_type }}"
        echo "GitHub ref name: ${{ github.ref_name }}"
        echo "Workflow dispatch tag: ${{ github.event.inputs.tag }}"

  build:
    needs: debug
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - os: macos-15
            python-version: '3.11'
            arch: x64
            target: macos-x64
          - os: macos-15
            python-version: '3.11'
            arch: arm64
            target: macos-arm64
          
          # Windows builds
          - os: windows-2022
            python-version: '3.11'
            arch: x64
            target: windows-x64
          
          # Ubuntu builds
          - os: ubuntu-22.04
            python-version: '3.11'
            arch: x64
            target: linux-x64

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.arch }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[build]"

    - name: Build binary
      run: |
        python scripts/build_binary.py --output-dir dist/${{ matrix.target }}

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: bubbola-${{ matrix.target }}
        path: dist/${{ matrix.target }}/bubbola*
        retention-days: 30

    - name: Test built binary
      env:
        # These will be automatically picked up by your config system
        CI: true
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        DEEPINFRA_TOKEN: ${{ secrets.DEEPINFRA_TOKEN }}
        OPENROUTER: ${{ secrets.OPENROUTER }}
      run: |
        if [[ "${{ matrix.os }}" == windows* ]]; then
          dist/${{ matrix.target }}/bubbola.exe sanitize tests/assets/0088_001.pdf
          # Test the small_test flow with the test image
          dist/${{ matrix.target }}/bubbola.exe extract --input tests/assets/single_pages_resized/0088_001_001.png --flow small_test --yes
        else
          chmod +x dist/${{ matrix.target }}/bubbola* || true
          dist/${{ matrix.target }}/bubbola* sanitize tests/assets/0088_001.pdf
          # Test the small_test flow with the test image
          dist/${{ matrix.target }}/bubbola* extract --input tests/assets/single_pages_resized/0088_001_001.png --flow small_test --yes
        fi
      shell: bash

  # Create release after all builds complete
  create-release:
    needs: build
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        # Create a directory for release assets
        mkdir -p release-assets
        
        # Copy and rename binaries for better organization
        cp artifacts/bubbola-macos-x64/bubbola release-assets/bubbola-macos-x64
        cp artifacts/bubbola-macos-arm64/bubbola release-assets/bubbola-macos-arm64
        cp artifacts/bubbola-windows-x64/bubbola.exe release-assets/bubbola-windows-x64.exe
        cp artifacts/bubbola-linux-x64/bubbola release-assets/bubbola-linux-x64
        
        # Make binaries executable
        chmod +x release-assets/bubbola-macos-x64
        chmod +x release-assets/bubbola-macos-arm64
        chmod +x release-assets/bubbola-linux-x64
        
        # Create a checksums file for verification
        cd release-assets
        sha256sum bubbola-* > checksums.txt
        echo "Release assets prepared:"
        ls -la
        cat checksums.txt

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release-assets/bubbola-macos-x64
          release-assets/bubbola-macos-arm64
          release-assets/bubbola-windows-x64.exe
          release-assets/bubbola-linux-x64
          release-assets/checksums.txt
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 